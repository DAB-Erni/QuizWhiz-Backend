// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizWhizAPI.Data;

#nullable disable

namespace QuizWhizAPI.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    partial class QuizDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.CheckTest", b =>
                {
                    b.Property<int>("CheckTestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckTestId"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TakeQuizId")
                        .HasColumnType("int");

                    b.HasKey("CheckTestId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.HasIndex("TakeQuizId");

                    b.ToTable("CheckTests");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.CreatedQuiz", b =>
                {
                    b.Property<int>("CreatedQuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreatedQuizId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CreatedQuizId");

                    b.HasIndex("UserId");

                    b.ToTable("CreatedQuizzes");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("CreatedQuizId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("CreatedQuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.TakeQuiz", b =>
                {
                    b.Property<int>("TakeQuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TakeQuizId"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedQuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TakeQuizId");

                    b.HasIndex("CreatedQuizId");

                    b.HasIndex("UserId");

                    b.ToTable("TakeQuizzes");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.CheckTest", b =>
                {
                    b.HasOne("QuizWhizAPI.Models.Entities.Question", "Question")
                        .WithOne("CheckTest")
                        .HasForeignKey("QuizWhizAPI.Models.Entities.CheckTest", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizWhizAPI.Models.Entities.TakeQuiz", "TakeQuiz")
                        .WithMany("CheckTests")
                        .HasForeignKey("TakeQuizId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TakeQuiz");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.CreatedQuiz", b =>
                {
                    b.HasOne("QuizWhizAPI.Models.Entities.User", "CreatedBy")
                        .WithMany("CreatedQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.Question", b =>
                {
                    b.HasOne("QuizWhizAPI.Models.Entities.CreatedQuiz", "CreatedQuiz")
                        .WithMany("Questions")
                        .HasForeignKey("CreatedQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedQuiz");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.TakeQuiz", b =>
                {
                    b.HasOne("QuizWhizAPI.Models.Entities.CreatedQuiz", "CreatedQuiz")
                        .WithMany("TakeQuizzes")
                        .HasForeignKey("CreatedQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizWhizAPI.Models.Entities.User", "TakenBy")
                        .WithMany("TakeQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedQuiz");

                    b.Navigation("TakenBy");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.CreatedQuiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("TakeQuizzes");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.Question", b =>
                {
                    b.Navigation("CheckTest")
                        .IsRequired();
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.TakeQuiz", b =>
                {
                    b.Navigation("CheckTests");
                });

            modelBuilder.Entity("QuizWhizAPI.Models.Entities.User", b =>
                {
                    b.Navigation("CreatedQuizzes");

                    b.Navigation("TakeQuizzes");
                });
#pragma warning restore 612, 618
        }
    }
}
